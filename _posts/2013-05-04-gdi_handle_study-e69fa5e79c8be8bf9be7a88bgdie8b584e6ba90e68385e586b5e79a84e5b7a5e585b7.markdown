---
author: admin
comments: true
date: 2013-05-04 08:16:35+00:00
layout: post
slug: gdi_handle_study-%e6%9f%a5%e7%9c%8b%e8%bf%9b%e7%a8%8bgdi%e8%b5%84%e6%ba%90%e6%83%85%e5%86%b5%e7%9a%84%e5%b7%a5%e5%85%b7
title: gdi_handle_study —— 查看进程GDI资源情况的工具
wordpress_id: 238
categories:
- NTInternals
---

gdi_handle_study 是一个用于查看进程中gdi句柄资源的工具。可以用于监控gdi资源是否泄露，已经对gdi资源的使用情况。使用方法非常简单：

{% highlight windbg %}
<blockquote>usage: gdi_handle_study.exe [-c] [-v [-f <filter>]] [processname|pid]
processname    List GDI handles loaded by process (partial name accepted)
pid                   List GDI handles associated with the specified process id
-c                    Show GDI count information.
-v                    Show GDI handle information.
-f                    Filter the GDI handle type.</blockquote>
{% endhighlight %}

在不用任何参数的情况下，工具会显示所有进程的gdi资源使用概况，如图所示：
[![20130504154700](/uploads/2013/05/20130504154700.png)](/uploads/2013/05/20130504154700.png)

值得注意的是，GDI Total和GDI All的区别在于，GDI Total统计出来的数量，是通过工具本身枚举可统计GDI资源后得出统计值，而GDI All是通过系统API直接获得的值，有些的情况下，GDI Total的值是小于GDI All的值的。这种情况可能因为某些GDI资源是系统保留的。另外一个要注意的是，如果要显示所有进程的gdi情况，需要有管理员权限运行该工具。

processname和pid参数能让我们指定需要查看的进程名或者进程ID。参数-c能查看更为详细的gdi资源的统计情况。如下图所示：
[![20130504155533](/uploads/2013/05/20130504155533.png)](/uploads/2013/05/20130504155533.png)

从上图可以看出，qq这种DirectUI程序，用的Bitmap资源何其的多啊。。。

-v参数是用来查看更为详细的GDI资源信息，其中就包括额资源的句柄，资源的种类以及资源的内核对象地址。如图所示：
[![20130504160314](/uploads/2013/05/20130504160314.png)](/uploads/2013/05/20130504160314.png)

最后工具还能利用-f filter，来查看想看到的资源情况，例如上图中，bitmap不是自己想看的资源，但是却占据了大量的视野。这个时候filter就能用上了。如图：
[![20130504160837](/uploads/2013/05/20130504160837.png)](/uploads/2013/05/20130504160837.png)

上图就是利用filter，显示的Brush资源的详细情况了。

下载[gdi_handle_study](/uploads/2013/05/gdi_handle_study.zip)
